import warnings
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from keras import models
from keras import layers
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.exceptions import DataConversionWarning
from sklearn.metrics import accuracy_score 

warnings.filterwarnings(action = 'ignore', category = DataConversionWarning) 

class Preprocess:
    def __init__(self, csv):
        encoder = LabelEncoder()
        self.train_X, self.train_Y, self.test_X, self.test_Y = self.data_manager(csv, encoder)

    def data_manager(self, csv, encoder):
        #import file, drop rows containing N/A
        input = pd.read_csv(csv, header = 0).dropna(axis = 0)
        
        #70% training data, normalise features, split class
        training_data = input.sample(frac = 0.7, random_state = 200)
        train_X = self.normalise(training_data.iloc[:, 0:11])
        train_y = training_data.iloc[:, 11:12]
        
        #30% testing data, normalise features, split class
        testing_data = input.drop(training_data.index)
        test_X = self.normalise(testing_data.iloc[:, 0:11])
        test_y = testing_data.iloc[:, 11:12]

        train_y = encoder.fit_transform(train_y)
        test_y = encoder.fit_transform(test_y)
        train_X.to_numpy()
        test_X.to_numpy()

        return train_X, train_y, test_X, test_y

    def normalise(self, input_features):
        #set column values between 0-1 independently
        x = input_features

        for i in x.columns:
            x[i] = (x[i] - x[i].min()) / (x[i].max() - x[i].min())

        return x

class Classification_MultilayerPerceptron:
    def __init__(self, train_X, train_y, test_X, test_y):
        model = self.model_init()
        model, model_history = self.train(model, train_X, train_y)
        model_accuracy = self.test(model, test_X, test_y)
        print('Multilayer Perceptron Classification Model Accuracy: {}%'.format(100 * model_accuracy))
        self.plot(model_history)

    def model_init(self):
        model = models.Sequential([
        layers.Dense(10, input_dim = 11, activation = 'relu'),
        layers.Dropout(0.1),
        layers.Dense(10, activation = 'relu'),
        layers.Dropout(0.1),
        layers.Dense(6, activation = 'softmax')
        ])

        model.compile(loss = 'sparse_categorical_crossentropy', 
                      optimizer = 'sgd', 
                      metrics = ['accuracy']
        )

        return model
        
    def train(self, model, train_X, train_y):
        history = model.fit(train_X, train_y, epochs = 100)

        return model, history

    def test(self, model, test_X, test_y):
        loss, accuracy = model.evaluate(test_X, test_y, verbose = 2)
        
        return accuracy

    def plot(self, history):
        plt.plot(history.history['accuracy'])
        plt.title('MLP Classification Accuracy')
        plt.ylabel('Accuracy')
        plt.xlabel('Epoch')

        ax = plt.gca()
        ax.set_ylim([0, 1])

        plt.show()

class Classification_MultinomialLogisticRegression:
    def __init__(self, train_X, train_y, test_X, test_y):
        model = self.model_init()
        model = self.train(model, train_X, train_y)
        model_accuracy = self.test(model, test_X, test_y)
        print('Multinomial Logistic Regression Classification Model Accuracy: {}%'.format(100 * model_accuracy))

    def model_init(self):
        model = LogisticRegression(multi_class = 'multinomial', 
                                   solver = 'lbfgs', 
                                   penalty = 'l2', 
                                   C = 1.0)

        return model

    def train(self, model, train_X, train_y):
        model.fit(train_X, np.ravel(train_y))

        return(model)

    def test(self, model, test_X, test_y):
        pred_y = model.predict(test_X)
        
        return accuracy_score(test_y, pred_y)

if __name__ == '__main__':
    wine_path = 'D:\OneDrive\Academia\MSc Machine Learning in Science\Modules\COMP3009 Machine Learning\Submissions\Assignment 1\wine.csv'
    wine_dataset = Preprocess(wine_path)
    Classification_MultilayerPerceptron(wine_dataset.train_X, wine_dataset.train_Y, wine_dataset.test_X, wine_dataset.test_Y)
    Classification_MultinomialLogisticRegression(wine_dataset.train_X, wine_dataset.train_Y, wine_dataset.test_X, wine_dataset.test_Y)
